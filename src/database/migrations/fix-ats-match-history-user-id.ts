import { MigrationInterface, QueryRunner } from 'typeorm';

export class FixAtsMatchHistoryUserId1721318400000
  implements MigrationInterface
{
  name = 'FixAtsMatchHistoryUserId1721318400000';

  public async up(queryRunner: QueryRunner): Promise<void> {
    // First, let's check which user_id column has the data
    const result = (await queryRunner.query(`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'ats_match_histories' 
      AND column_name LIKE '%user%'
      ORDER BY ordinal_position;
    `)) as Array<{
      column_name: string;
      data_type: string;
      is_nullable: string;
    }>;

    console.log('Current user columns in ats_match_histories:', result);

    // Check if we have data in the string user_id column
    const stringUserIdData = (await queryRunner.query(`
      SELECT COUNT(*) as count 
      FROM ats_match_histories 
      WHERE user_id IS NOT NULL 
      AND user_id::text ~ '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$';
    `)) as Array<{ count: number }>;

    console.log(
      'Records with string user_id:',
      stringUserIdData[0]?.count || 0,
    );

    // Check if we have a separate userId column (auto-generated by TypeORM)
    const hasUserIdColumn = result.some((col) => col.column_name === 'userId');

    if (hasUserIdColumn) {
      // Check if we have data in the userId column
      const userIdData = (await queryRunner.query(`
        SELECT COUNT(*) as count 
        FROM ats_match_histories 
        WHERE "userId" IS NOT NULL;
      `)) as Array<{ count: number }>;

      console.log('Records with userId column:', userIdData[0]?.count || 0);

      // If userId column has data and user_id doesn't, copy the data
      if (userIdData[0]?.count > 0 && (stringUserIdData[0]?.count || 0) === 0) {
        await queryRunner.query(`
          UPDATE ats_match_histories 
          SET user_id = "userId"::text 
          WHERE "userId" IS NOT NULL;
        `);
        console.log('Copied data from userId to user_id column');
      }

      // Remove the foreign key constraint on userId if it exists
      const foreignKeys = (await queryRunner.query(`
        SELECT conname 
        FROM pg_constraint 
        WHERE conrelid = 'ats_match_histories'::regclass 
        AND contype = 'f' 
        AND conname LIKE '%userId%';
      `)) as Array<{ conname: string }>;

      for (const fk of foreignKeys) {
        await queryRunner.query(
          `ALTER TABLE "ats_match_histories" DROP CONSTRAINT "${fk.conname}";`,
        );
        console.log(`Dropped foreign key constraint: ${fk.conname}`);
      }

      // Drop the redundant userId column
      await queryRunner.query(
        `ALTER TABLE "ats_match_histories" DROP COLUMN "userId";`,
      );
      console.log('Dropped redundant userId column');
    }

    // Ensure user_id column is properly typed as UUID if it contains UUID data
    if (stringUserIdData[0]?.count > 0) {
      // First, let's check the current data type
      const currentType = (await queryRunner.query(`
        SELECT data_type 
        FROM information_schema.columns 
        WHERE table_name = 'ats_match_histories' 
        AND column_name = 'user_id';
      `)) as Array<{ data_type: string }>;

      console.log('Current user_id data type:', currentType[0]?.data_type);

      // If it's not already UUID type and contains UUID data, convert it
      if (currentType[0]?.data_type !== 'uuid') {
        await queryRunner.query(`
          ALTER TABLE "ats_match_histories" 
          ALTER COLUMN "user_id" TYPE uuid USING user_id::uuid;
        `);
        console.log('Converted user_id column to UUID type');
      }
    }

    // Add foreign key constraint from user_id to users table
    await queryRunner.query(`
      ALTER TABLE "ats_match_histories" 
      ADD CONSTRAINT "FK_ats_match_histories_user_id" 
      FOREIGN KEY ("user_id") REFERENCES "users"("id") 
      ON DELETE SET NULL 
      ON UPDATE CASCADE;
    `);
    console.log('Added foreign key constraint for user_id');
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    // Remove the foreign key constraint
    await queryRunner.query(`
      ALTER TABLE "ats_match_histories" 
      DROP CONSTRAINT "FK_ats_match_histories_user_id";
    `);

    // If we need to revert the type change, convert back to text
    await queryRunner.query(`
      ALTER TABLE "ats_match_histories" 
      ALTER COLUMN "user_id" TYPE text;
    `);

    // Note: We don't recreate the userId column in down migration
    // as it would be difficult to restore the exact original state
    console.log('Reverted user_id foreign key constraint and type changes');
  }
}
