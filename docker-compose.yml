version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ats-fit-postgres
    restart: unless-stopped
    env_file:
      - src/config/.env.prod
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-ats_fit}
      POSTGRES_USER: ${DATABASE_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - '${DATABASE_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - ats-fit-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${DATABASE_USERNAME:-postgres} -d ${DATABASE_NAME:-ats_fit}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ats-fit-redis
    restart: unless-stopped
    env_file:
      - src/config/.env.prod
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    networks:
      - ats-fit-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ats-fit-app
    restart: unless-stopped
    env_file:
      - src/config/.env.prod
    environment:
      # Override database and redis hosts for Docker networking
      DATABASE_HOST: postgres
      REDIS_HOST: redis
    ports:
      - '${PORT:-3000}:3000'
    volumes:
      - ./logs:/usr/src/app/logs
    networks:
      - ats-fit-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ats-fit-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@ats-fit.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - '5050:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ats-fit-network
    depends_on:
      - postgres
    profiles:
      - admin

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ats-fit-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
    ports:
      - '8081:8081'
    networks:
      - ats-fit-network
    depends_on:
      - redis
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  ats-fit-network:
    driver: bridge
